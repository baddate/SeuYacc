#ifndef Y_TAB_H
#define Y_TAB_H
#define  IDENTIFIER    "IDENTIFIER"
#define  CONSTANT    "CONSTANT"
#define  STRING_LITERAL    "STRING_LITERAL"
#define  SIZEOF    "SIZEOF"
#define  PTR_OP    "PTR_OP"
#define  INC_OP    "INC_OP"
#define  DEC_OP    "DEC_OP"
#define  LEFT_OP    "LEFT_OP"
#define  RIGHT_OP    "RIGHT_OP"
#define  LE_OP    "LE_OP"
#define  GE_OP    "GE_OP"
#define  EQ_OP    "EQ_OP"
#define  NE_OP    "NE_OP"
#define  AND_OP    "AND_OP"
#define  OR_OP    "OR_OP"
#define  MUL_ASSIGN    "MUL_ASSIGN"
#define  DIV_ASSIGN    "DIV_ASSIGN"
#define  MOD_ASSIGN    "MOD_ASSIGN"
#define  ADD_ASSIGN    "ADD_ASSIGN"
#define  SUB_ASSIGN    "SUB_ASSIGN"
#define  LEFT_ASSIGN    "LEFT_ASSIGN"
#define  RIGHT_ASSIGN    "RIGHT_ASSIGN"
#define  AND_ASSIGN    "AND_ASSIGN"
#define  XOR_ASSIGN    "XOR_ASSIGN"
#define  OR_ASSIGN    "OR_ASSIGN"
#define  TYPE_NAME    "TYPE_NAME"
#define  TYPEDEF    "TYPEDEF"
#define  EXTERN    "EXTERN"
#define  STATIC    "STATIC"
#define  AUTO    "AUTO"
#define  REGISTER    "REGISTER"
#define  INLINE    "INLINE"
#define  RESTRICT    "RESTRICT"
#define  CHAR    "CHAR"
#define  SHORT    "SHORT"
#define  INT    "INT"
#define  LONG    "LONG"
#define  SIGNED    "SIGNED"
#define  UNSIGNED    "UNSIGNED"
#define  FLOAT    "FLOAT"
#define  DOUBLE    "DOUBLE"
#define  CONST    "CONST"
#define  VOLATILE    "VOLATILE"
#define  VOID    "VOID"
#define  BOOL    "BOOL"
#define  COMPLEX    "COMPLEX"
#define  IMAGINARY    "IMAGINARY"
#define  STRUCT    "STRUCT"
#define  UNION    "UNION"
#define  ENUM    "ENUM"
#define  ELLIPSIS    "ELLIPSIS"
#define  CASE    "CASE"
#define  DEFAULT    "DEFAULT"
#define  IF    "IF"
#define  ELSE    "ELSE"
#define  SWITCH    "SWITCH"
#define  WHILE    "WHILE"
#define  DO    "DO"
#define  FOR    "FOR"
#define  GOTO    "GOTO"
#define  CONTINUE    "CONTINUE"
#define  BREAK    "BREAK"
#define  RETURN    "RETURN"
#define  primary_expression    "primary_expression"
#define  postfix_expression    "postfix_expression"
#define  argument_expression_list    "argument_expression_list"
#define  unary_expression    "unary_expression"
#define  unary_operator    "unary_operator"
#define  cast_expression    "cast_expression"
#define  multiplicative_expression    "multiplicative_expression"
#define  additive_expression    "additive_expression"
#define  shift_expression    "shift_expression"
#define  relational_expression    "relational_expression"
#define  equality_expression    "equality_expression"
#define  and_expression    "and_expression"
#define  exclusive_or_expression    "exclusive_or_expression"
#define  inclusive_or_expression    "inclusive_or_expression"
#define  logical_and_expression    "logical_and_expression"
#define  logical_or_expression    "logical_or_expression"
#define  conditional_expression    "conditional_expression"
#define  assignment_expression    "assignment_expression"
#define  assignment_operator    "assignment_operator"
#define  expression    "expression"
#define  constant_expression    "constant_expression"
#define  declaration    "declaration"
#define  declaration_specifiers    "declaration_specifiers"
#define  init_declarator_list    "init_declarator_list"
#define  init_declarator    "init_declarator"
#define  storage_class_specifier    "storage_class_specifier"
#define  type_specifier    "type_specifier"
#define  struct_or_union_specifier    "struct_or_union_specifier"
#define  struct_or_union    "struct_or_union"
#define  struct_declaration_list    "struct_declaration_list"
#define  struct_declaration    "struct_declaration"
#define  specifier_qualifier_list    "specifier_qualifier_list"
#define  struct_declarator_list    "struct_declarator_list"
#define  struct_declarator    "struct_declarator"
#define  enum_specifier    "enum_specifier"
#define  enumerator_list    "enumerator_list"
#define  enumerator    "enumerator"
#define  type_qualifier    "type_qualifier"
#define  function_specifier    "function_specifier"
#define  declarator    "declarator"
#define  direct_declarator    "direct_declarator"
#define  pointer    "pointer"
#define  type_qualifier_list    "type_qualifier_list"
#define  parameter_type_list    "parameter_type_list"
#define  parameter_list    "parameter_list"
#define  parameter_declaration    "parameter_declaration"
#define  identifier_list    "identifier_list"
#define  type_name    "type_name"
#define  abstract_declarator    "abstract_declarator"
#define  direct_abstract_declarator    "direct_abstract_declarator"
#define  initializer    "initializer"
#define  initializer_list    "initializer_list"
#define  designation    "designation"
#define  designator_list    "designator_list"
#define  designator    "designator"
#define  statement    "statement"
#define  labeled_statement    "labeled_statement"
#define  compound_statement    "compound_statement"
#define  block_item_list    "block_item_list"
#define  block_item    "block_item"
#define  expression_statement    "expression_statement"
#define  selection_statement    "selection_statement"
#define  iteration_statement    "iteration_statement"
#define  jump_statement    "jump_statement"
#define  translation_unit    "translation_unit"
#define  external_declaration    "external_declaration"
#define  function_definition    "function_definition"
#define  declaration_list    "declaration_list"
#endif
